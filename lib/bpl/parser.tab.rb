#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex'
require_relative 'ast/token'
require_relative 'ast/program'
require_relative 'ast/declaration'
require_relative 'ast/specification'
require_relative 'ast/statement'
require_relative 'ast/expression'
require_relative 'ast/type'
include Bpl::AST

class BoogieLanguage < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 352)
def parse(input)
  scan_str(input)
end

def parse_special(str, kind)
  scan_setup("$$PARSE_#{kind.upcase}$$ " + str)
  do_parse
end

def parse_decl(str) parse_special(str, :decl) end
def parse_param(str) parse_special(str, :param) end
def parse_spec(str) parse_special(str, :spec) end
def parse_blocks(str) parse_special(str, :blocks) end
def parse_block(str) parse_special(str, :blocks).first end
def parse_stmt(str) parse_special(str, :stmt) end
def parse_expr(str) parse_special(str, :expr) end
def parse_type(str) parse_special(str, :type) end

def parse_str(str)
  case str
  when /\b(type|const|function|axiom|var|procedure|implementation)\b/
    parse_decl(str)
  when /\b(requires|ensures|modifies|invariant)\b/
    parse_spec(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;.*\s+#{Bpl::IDENTIFIER}:/m
    parse_blocks(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;/m
    parse_block(str)
  when /\b(assert|assume|havoc|call|if|while|break|goto|return)\b|:=/
    parse_stmt(str)
  when /[^<:]:[^:]/
    parse_param(str)
  else
    parse_expr(str)
  end
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    68,   104,  -103,    62,   254,  -147,   -37,    79,    63,   335,
   337,    49,  -190,    81,   362,   324,   173,    79,  -124,    35,
    77,    64,    29,    35,   334,    69,    76,    55,    59,    58,
    77,   -31,    29,   383,    55,   382,    76,    74,    75,   367,
    60,    61,   116,   159,    91,    65,   255,    74,    75,   135,
    81,   109,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
  -124,    35,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   246,    92,   132,   133,   134,   130,   131,   135,   247,   277,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   135,   248,   355,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   135,   249,   140,
   132,   133,   134,   250,    81,   135,   324,   275,   132,   133,
   134,   130,   131,   129,   122,   123,   124,   125,   126,   127,
   128,   121,   120,   119,   118,   135,   251,   185,   132,   133,
   134,   130,   131,   129,   122,   123,   124,   125,   126,   127,
   128,   121,   120,   119,   118,   135,   252,    94,   132,   133,
   134,    55,   115,   135,    79,   243,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,    79,   236,   235,    35,   145,   146,    68,
    49,    35,    62,    95,    96,    97,    38,    63,    -9,  -124,
  -124,  -124,    79,    29,  -124,  -124,  -124,    29,    81,   225,
    64,   113,   222,   242,    69,   135,    55,    59,    58,    39,
   135,    40,    41,    43,    45,    46,    47,    48,   135,    60,
    61,   253,   135,   141,    65,   132,   133,   134,   130,   131,
   129,   122,   123,   124,   125,   126,   127,   128,   121,   120,
   119,   118,    90,    68,    79,   135,    62,   142,   132,   133,
   134,    63,    68,    22,   259,    62,   183,    77,  -165,    29,
    63,   152,    29,    76,    64,   263,   264,    29,    69,   385,
    55,    59,    58,    64,    74,    75,   265,    69,   266,    55,
    59,    58,    68,    60,    61,    62,    29,   271,    65,   272,
    63,    68,    60,    61,    62,   273,   274,    65,    81,    63,
   276,    81,    81,    64,    81,    55,    81,    69,   111,    55,
    59,    58,    64,   287,   288,   -37,    69,    81,    55,    59,
    58,    68,    60,    61,    62,    29,    79,    65,   291,    63,
   292,    60,    61,   293,    55,   113,    65,    81,   298,    77,
    29,    29,    64,   300,    68,    76,    69,    62,    55,    59,
    58,   226,    63,   302,    81,   157,    74,    75,    29,    29,
   313,    60,    61,   314,   315,    64,    65,    68,   316,    69,
    62,    55,    59,    58,   135,    63,   317,   132,   133,   134,
   130,   131,   129,    55,    60,    61,   186,   -37,    64,    65,
   320,   159,    69,   184,    55,    59,    58,    68,    79,    79,
    62,   183,    29,   329,    29,    63,    68,    60,    61,    62,
    55,    77,    65,    29,    63,   332,   333,    76,    64,    55,
   336,    91,    69,   338,    55,    59,    58,    64,    74,    75,
   339,    69,    55,    55,    59,    58,    68,    60,    61,    62,
    55,    29,    65,   343,    63,    68,    60,    61,    62,   174,
    35,    65,    29,    63,    81,   159,   348,    64,   173,    29,
   352,    69,   352,    55,    59,    58,    64,   354,    55,   357,
    69,    29,    55,    59,    58,    68,    60,    61,    62,   359,
   360,    65,    22,    63,    68,    60,    61,    62,   365,   140,
    65,    81,    63,    81,   212,   140,    64,   105,    29,    81,
    69,    29,    55,    59,    58,    64,   378,   379,   -37,    69,
   380,    55,    59,    58,   226,    60,    61,   135,    68,    79,
    65,    62,    26,   102,    60,    61,    63,    68,   nil,    65,
    62,   nil,    77,   nil,    29,    63,   nil,   nil,    76,    64,
   nil,   nil,   nil,    69,   nil,    55,    59,    58,    64,    74,
    75,   nil,    69,   nil,    55,    59,    58,    68,    60,    61,
    62,   nil,   nil,    65,   nil,    63,    68,    60,    61,    62,
   nil,   nil,    65,   nil,    63,   nil,   nil,   nil,    64,   nil,
   nil,   nil,    69,   nil,    55,   209,    58,    64,   nil,   nil,
   nil,    69,   nil,    55,    59,    58,    68,    60,    61,    62,
   nil,   nil,    65,   nil,    63,    68,    60,    61,    62,   nil,
   nil,    65,   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,
   nil,    69,   nil,    55,    59,    58,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    68,    60,    61,    62,   nil,
   nil,    65,   nil,    63,    68,    60,    61,    62,   nil,   nil,
    65,   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    68,    60,    61,    62,   nil,   nil,
    65,   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,
   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,    68,
    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,
    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,    68,
    60,    61,    62,   nil,   nil,    65,   nil,    63,    68,    60,
    61,    62,   nil,   nil,    65,   nil,    63,   nil,   nil,   nil,
    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,    64,
   nil,   nil,   nil,    69,   nil,    55,    59,    58,    68,    60,
    61,    62,   nil,   nil,    65,   nil,    63,    68,    60,    61,
    62,   nil,   nil,    65,   nil,    63,   nil,   nil,   nil,    64,
   nil,   nil,   nil,    69,   nil,    55,    59,    58,    64,   nil,
   nil,   nil,    69,   nil,    55,    59,    58,    68,    60,    61,
    62,   nil,   nil,    65,   nil,    63,    68,    60,    61,    62,
   nil,   nil,    65,   nil,    63,   nil,   nil,   nil,    64,   nil,
   nil,   nil,    69,   nil,    55,    59,    58,    64,   nil,   nil,
   nil,    69,   nil,    55,    59,    58,    68,    60,    61,    62,
   nil,   nil,    65,   nil,    63,    68,    60,    61,    62,   nil,
   nil,    65,   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,
   nil,    69,   nil,    55,    59,    58,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    68,    60,    61,    62,   nil,
   nil,    65,   nil,    63,    68,    60,    61,    62,   183,   nil,
    65,   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    68,    60,    61,    62,   nil,   nil,
    65,   nil,    63,    68,    60,    61,    62,   183,   nil,    65,
   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    64,   nil,   nil,    79,    69,   nil,    55,    59,
    58,   nil,    60,    61,   nil,   nil,   nil,    65,    77,   nil,
    29,    60,    61,   nil,    76,   nil,    65,     3,     4,     5,
     6,     7,     8,     9,   135,    74,    75,   132,   133,   134,
   130,   131,   129,   122,   123,   124,   125,   126,   127,   128,
   121,   120,   119,   118,    49,   nil,    18,   nil,   nil,    19,
    38,   nil,    20,    49,    21,    22,   nil,    23,   nil,    55,
   nil,    24,   245,    49,   nil,   nil,   nil,   nil,   nil,    38,
   nil,   nil,   nil,    39,   nil,    40,    41,    43,    45,    46,
    47,    48,    39,   nil,    40,    41,    43,    45,    46,    47,
    48,   nil,    39,    79,    40,    41,    43,    45,    46,    47,
    48,    49,   nil,   nil,   nil,   nil,    77,    38,    29,   nil,
    49,   nil,    76,   nil,   nil,   nil,    38,   nil,   nil,    49,
   nil,   nil,   nil,    74,    75,    38,   nil,   nil,   nil,   nil,
    39,   nil,    40,    41,    43,    45,    46,    47,    48,    39,
   nil,    40,    41,    43,    45,    46,    47,    48,    39,    79,
    40,    41,    43,    45,    46,    47,    48,    49,   nil,   nil,
   nil,   nil,    77,    38,    29,   nil,    18,   nil,    76,    19,
   nil,   nil,    20,   nil,    21,    22,   nil,    23,   nil,    74,
    75,    24,    79,   nil,   nil,    79,    39,   nil,    40,    41,
    43,    45,    46,    47,    48,    77,   nil,    29,    77,   nil,
    29,    76,   nil,   nil,    76,    79,   nil,   nil,    79,   nil,
   nil,   nil,    74,    75,   nil,    74,    75,   nil,    77,   nil,
    29,    77,   nil,    29,    76,   nil,   nil,    76,    79,   nil,
   nil,    79,   nil,   nil,   nil,    74,    75,   nil,    74,    75,
   nil,    77,   nil,    29,    77,   nil,    29,    76,   135,   nil,
    76,   132,   133,   134,   130,   131,   129,   nil,    74,    75,
   135,    74,    75,   132,   133,   134,   130,   131,   129,   122,
   123,   124,   125,   126,   127,   128,   121,   120,   119,   118,
   nil,   nil,   nil,   135,   nil,   260,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   nil,   nil,   nil,   135,   nil,   358,   132,
   133,   134,   130,   131,   129,   122,   123,   124,   125,   126,
   127,   128,   121,   120,   119,   118,   nil,   nil,   nil,   135,
   nil,   218,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   nil,   290,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   211,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   nil,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   nil,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   nil,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   321,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   nil,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   nil,   nil,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   135,   nil,
   nil,   132,   133,   134,   130,   131,   129,   122,   123,   124,
   125,   126,   127,   128,   121,   120,   135,   nil,   nil,   132,
   133,   134,   130,   131,   129,   122,   123,   124,   125,   126,
   127,   128,   121,    18,   nil,   nil,    19,   nil,   nil,    20,
   nil,    21,    22,   nil,    23,   nil,   135,   nil,    24,   132,
   133,   134,   130,   131,   129,   122,   123,   124,   125,   126,
   127,   128,   135,   nil,   nil,   132,   133,   134,   130,   131,
   129,   135,   nil,   nil,   132,   133,   134,   130,   131,   129,
   135,   nil,   nil,   132,   133,   134,   130,   131,   129,   135,
   nil,   nil,   132,   133,   134,   130,   131,   129,   135,   nil,
   nil,   132,   133,   134,   130,   131,   129 ]

racc_action_check = [
    47,    43,   177,    47,   210,   271,   369,   298,    47,   308,
   312,   357,   351,   327,   351,   327,   177,   369,   250,   250,
   298,    47,   298,   351,   308,    47,   298,    47,    47,    47,
   369,   369,   369,   378,   173,   378,   369,   298,   298,   357,
    47,    47,    52,   271,   369,    47,   210,   369,   369,   241,
    43,    47,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   342,
   286,   286,   342,   342,   342,   342,   342,   342,   342,   342,
   342,   342,   342,   342,   342,   342,   342,   342,   342,   203,
   176,    31,   203,   203,   203,   203,   203,   239,   178,   241,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   108,   179,   342,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   137,   180,    65,
   137,   137,   137,   182,   292,   172,   292,   239,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   161,   187,   108,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   204,   188,    32,   204,   204,
   204,   169,    51,   171,   164,   172,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   163,   162,   161,   362,    69,    69,    69,
    53,   364,    69,    36,    36,    36,    53,    69,    38,   362,
   362,   362,   160,   158,   364,   364,   364,   156,    39,   153,
    69,    50,   151,   171,    69,   206,    69,    69,    69,    53,
   207,    53,    53,    53,    53,    53,    53,    53,   208,    69,
    69,   209,   384,    67,    69,   384,   384,   384,   384,   384,
   384,   384,   384,   384,   384,   384,   384,   384,   384,   384,
   384,   384,    26,   133,   272,   205,   133,    68,   205,   205,
   205,   133,   249,   214,   215,   249,   249,   272,   272,   272,
   249,    78,   219,   272,   133,   223,   224,    79,   133,   384,
   133,   133,   133,   249,   272,   272,   228,   249,   230,   249,
   249,   249,   247,   133,   133,   247,   232,   233,   133,   234,
   247,   245,   249,   249,   245,   237,   238,   249,    24,   245,
   240,    23,    22,   247,    21,   248,    20,   247,    49,   247,
   247,   247,   245,   251,   253,   149,   245,    19,   245,   245,
   245,   266,   247,   247,   266,    81,   149,   247,   257,   266,
   261,   245,   245,   262,   115,   114,   245,    18,   267,   149,
   268,   149,   266,   269,   290,   149,   266,   290,   266,   266,
   266,   266,   290,   270,    82,    83,   149,   149,   273,   274,
   279,   266,   266,   281,   282,   290,   266,   211,   284,   290,
   211,   290,   290,   290,   199,   211,   285,   199,   199,   199,
   199,   199,   199,    48,   290,   290,   110,    73,   211,   290,
   288,    84,   211,   107,   211,   211,   211,   315,    73,   144,
   315,   315,   293,   297,    85,   315,     8,   211,   211,     8,
   304,    73,   211,    73,     8,   305,   307,    73,   315,    46,
   310,    30,   315,   313,   315,   315,   315,     8,    73,    73,
   314,     8,   104,     8,     8,     8,   170,   315,   315,   170,
   103,    87,   315,   319,   170,   168,     8,     8,   168,   101,
     5,     8,     4,   168,    40,   332,   333,   170,   100,    88,
   336,   170,   337,   170,   170,   170,   168,   341,    41,   343,
   168,    89,   168,   168,   168,   317,   170,   170,   317,   345,
   348,   170,   140,   317,   154,   168,   168,   154,   352,   353,
   168,    97,   154,    96,   139,   363,   317,    45,   365,    95,
   317,    91,   317,   317,   317,   154,   370,   376,   148,   154,
   377,   154,   154,   154,   154,   317,   317,   136,   142,   148,
   317,   142,     1,    42,   154,   154,   142,   141,   nil,   154,
   141,   nil,   148,   nil,   148,   141,   nil,   nil,   148,   142,
   nil,   nil,   nil,   142,   nil,   142,   142,   142,   141,   148,
   148,   nil,   141,   nil,   141,   141,   141,   135,   142,   142,
   135,   nil,   nil,   142,   nil,   135,    94,   141,   141,    94,
   nil,   nil,   141,   nil,    94,   nil,   nil,   nil,   135,   nil,
   nil,   nil,   135,   nil,   135,   135,   135,    94,   nil,   nil,
   nil,    94,   nil,    94,    94,    94,   134,   135,   135,   134,
   nil,   nil,   135,   nil,   134,   255,    94,    94,   255,   nil,
   nil,    94,   nil,   255,   nil,   nil,   nil,   134,   nil,   nil,
   nil,   134,   nil,   134,   134,   134,   255,   nil,   nil,   nil,
   255,   nil,   255,   255,   255,   323,   134,   134,   323,   nil,
   nil,   134,   nil,   323,   132,   255,   255,   132,   nil,   nil,
   255,   nil,   132,   nil,   nil,   nil,   323,   nil,   nil,   nil,
   323,   nil,   323,   323,   323,   132,   nil,   nil,   nil,   132,
   nil,   132,   132,   132,   131,   323,   323,   131,   nil,   nil,
   323,   nil,   131,   130,   132,   132,   130,   nil,   nil,   132,
   nil,   130,   nil,   nil,   nil,   131,   nil,   nil,   nil,   131,
   nil,   131,   131,   131,   130,   nil,   nil,   nil,   130,   nil,
   130,   130,   130,   129,   131,   131,   129,   nil,   nil,   131,
   nil,   129,   128,   130,   130,   128,   nil,   nil,   130,   nil,
   128,   nil,   nil,   nil,   129,   nil,   nil,   nil,   129,   nil,
   129,   129,   129,   128,   nil,   nil,   nil,   128,   nil,   128,
   128,   128,   127,   129,   129,   127,   nil,   nil,   129,   nil,
   127,   126,   128,   128,   126,   nil,   nil,   128,   nil,   126,
   nil,   nil,   nil,   127,   nil,   nil,   nil,   127,   nil,   127,
   127,   127,   126,   nil,   nil,   nil,   126,   nil,   126,   126,
   126,    62,   127,   127,    62,   nil,   nil,   127,   nil,    62,
    63,   126,   126,    63,   nil,   nil,   126,   nil,    63,   nil,
   nil,   nil,    62,   nil,   nil,   nil,    62,   nil,    62,    62,
    62,    63,   nil,   nil,   nil,    63,   nil,    63,    63,    63,
    64,    62,    62,    64,   nil,   nil,    62,   nil,    64,   125,
    63,    63,   125,   nil,   nil,    63,   nil,   125,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    64,   nil,    64,    64,    64,
   125,   nil,   nil,   nil,   125,   nil,   125,   125,   125,   124,
    64,    64,   124,   nil,   nil,    64,   nil,   124,   123,   125,
   125,   123,   nil,   nil,   125,   nil,   123,   nil,   nil,   nil,
   124,   nil,   nil,   nil,   124,   nil,   124,   124,   124,   123,
   nil,   nil,   nil,   123,   nil,   123,   123,   123,   324,   124,
   124,   324,   nil,   nil,   124,   nil,   324,   122,   123,   123,
   122,   nil,   nil,   123,   nil,   122,   nil,   nil,   nil,   324,
   nil,   nil,   nil,   324,   nil,   324,   324,   324,   122,   nil,
   nil,   nil,   122,   nil,   122,   122,   122,   121,   324,   324,
   121,   nil,   nil,   324,   nil,   121,   120,   122,   122,   120,
   nil,   nil,   122,   nil,   120,   nil,   nil,   nil,   121,   nil,
   nil,   nil,   121,   nil,   121,   121,   121,   120,   nil,   nil,
   nil,   120,   nil,   120,   120,   120,   119,   121,   121,   119,
   nil,   nil,   121,   nil,   119,   118,   120,   120,   118,   nil,
   nil,   120,   nil,   118,   nil,   nil,   nil,   119,   nil,   nil,
   nil,   119,   nil,   119,   119,   119,   118,   nil,   nil,   nil,
   118,   nil,   118,   118,   118,   113,   119,   119,   113,   nil,
   nil,   119,   nil,   113,   111,   118,   118,   111,   111,   nil,
   118,   nil,   111,   nil,   nil,   nil,   113,   nil,   nil,   nil,
   113,   nil,   113,   113,   113,   111,   nil,   nil,   nil,   111,
   nil,   111,   111,   111,   383,   113,   113,   383,   nil,   nil,
   113,   nil,   383,   105,   111,   111,   105,   105,   nil,   111,
   nil,   105,   nil,   nil,   nil,   383,   nil,   nil,   nil,   383,
   nil,   383,   383,   383,   105,   nil,   nil,   nil,   105,   nil,
   105,   105,   105,    86,   383,   383,    86,   nil,   nil,   383,
   nil,    86,   102,   105,   105,   102,   nil,   nil,   105,   nil,
   102,   nil,   nil,   nil,    86,   nil,   nil,   nil,    86,   nil,
    86,    86,    86,   102,   nil,   nil,   nil,   102,   nil,   102,
   102,   102,    99,    86,    86,    99,   nil,   nil,    86,   nil,
    99,    98,   102,   102,    98,   nil,   nil,   102,   nil,    98,
   nil,   nil,   nil,    99,   nil,   nil,   nil,    99,   nil,    99,
    99,    99,    98,   nil,   nil,   152,    98,   nil,    98,    98,
    98,   nil,    99,    99,   nil,   nil,   nil,    99,   152,   nil,
   152,    98,    98,   nil,   152,   nil,    98,     0,     0,     0,
     0,     0,     0,     0,   175,   152,   152,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,     6,   nil,     0,   nil,   nil,     0,
     6,   nil,     0,     7,     0,     0,   nil,     0,   nil,     7,
   nil,     0,   175,   316,   nil,   nil,   nil,   nil,   nil,   316,
   nil,   nil,   nil,     6,   nil,     6,     6,     6,     6,     6,
     6,     6,     7,   nil,     7,     7,     7,     7,     7,     7,
     7,   nil,   316,     9,   316,   316,   316,   316,   316,   316,
   316,   367,   nil,   nil,   nil,   nil,     9,   367,     9,   nil,
   213,   nil,     9,   nil,   nil,   nil,   213,   nil,   nil,   287,
   nil,   nil,   nil,     9,     9,   287,   nil,   nil,   nil,   nil,
   367,   nil,   367,   367,   367,   367,   367,   367,   367,   213,
   nil,   213,   213,   213,   213,   213,   213,   213,   287,   263,
   287,   287,   287,   287,   287,   287,   287,   116,   nil,   nil,
   nil,   nil,   263,   116,   263,   nil,    17,   nil,   263,    17,
   nil,   nil,    17,   nil,    17,    17,   nil,    17,   nil,   263,
   263,    17,   334,   nil,   nil,   335,   116,   nil,   116,   116,
   116,   116,   116,   116,   116,   334,   nil,   334,   335,   nil,
   335,   334,   nil,   nil,   335,   360,   nil,   nil,    92,   nil,
   nil,   nil,   334,   334,   nil,   335,   335,   nil,   360,   nil,
   360,    92,   nil,    92,   360,   nil,   nil,    92,    77,   nil,
   nil,   264,   nil,   nil,   nil,   360,   360,   nil,    92,    92,
   nil,    77,   nil,    77,   264,   nil,   264,    77,   196,   nil,
   264,   196,   196,   196,   196,   196,   196,   nil,    77,    77,
   217,   264,   264,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   nil,   nil,   nil,   344,   nil,   217,   344,   344,   344,   344,
   344,   344,   344,   344,   344,   344,   344,   344,   344,   344,
   344,   344,   344,   nil,   nil,   nil,   143,   nil,   344,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   nil,   nil,   nil,   256,
   nil,   143,   256,   256,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   138,
   nil,   256,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   167,
   138,   nil,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,    56,
   nil,   nil,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,   181,
   nil,   nil,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   227,
   nil,   nil,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   289,
   289,   nil,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   322,
   nil,   nil,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   192,
   nil,   nil,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   193,   nil,
   nil,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   194,   nil,   nil,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,     3,   nil,   nil,     3,   nil,   nil,     3,
   nil,     3,     3,   nil,     3,   nil,   195,   nil,     3,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   197,   nil,   nil,   197,   197,   197,   197,   197,
   197,   198,   nil,   nil,   198,   198,   198,   198,   198,   198,
   202,   nil,   nil,   202,   202,   202,   202,   202,   202,   201,
   nil,   nil,   201,   201,   201,   201,   201,   201,   200,   nil,
   nil,   200,   200,   200,   200,   200,   200 ]

racc_action_pointer = [
  1201,   562,   nil,  1698,   461,   426,  1239,  1248,   442,  1297,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1321,   326,   306,
   295,   293,   291,   290,   287,   nil,   282,   nil,   nil,   nil,
   418,    63,   112,   nil,   nil,   nil,   146,   nil,   200,   187,
   443,   477,   515,    -1,   nil,   508,   428,    -4,   392,   319,
   236,   149,    14,   195,   nil,   nil,  1604,   nil,   nil,   nil,
   nil,   nil,   827,   836,   866,    86,   nil,   234,   258,   215,
   nil,   nil,   nil,   422,   nil,   nil,   nil,  1432,   296,   276,
   nil,   334,   343,   329,   362,   413,  1139,   450,   468,   480,
   nil,   510,  1412,   nil,   602,   488,   482,   480,  1187,  1178,
   455,   434,  1148,   449,   441,  1109,   nil,   378,   112,   nil,
   371,  1070,   nil,  1061,   370,   343,  1352,   nil,  1031,  1022,
   992,   983,   953,   914,   905,   875,   797,   788,   758,   749,
   719,   710,   680,   279,   632,   593,   552,   132,  1564,   485,
   448,   563,   554,  1521,   423,   nil,   nil,   nil,   543,   350,
   nil,   212,  1199,   222,   520,   nil,   206,   nil,   202,   nil,
   216,   160,   159,   197,   178,   nil,   nil,  1584,   481,   160,
   472,   188,   140,     3,   nil,  1239,    35,   -27,    69,    70,
   109,  1624,   113,   nil,   nil,   nil,   nil,   136,   180,   nil,
   nil,   nil,  1704,  1723,  1741,  1771,  1463,  1787,  1796,   409,
  1823,  1814,  1805,    84,   180,   280,   240,   245,   253,   233,
    -2,   403,   nil,  1305,   219,   264,   nil,  1475,   nil,   271,
   nil,   nil,   nil,   299,   263,   nil,   nil,  1644,   264,   nil,
   275,   nil,   295,   307,   300,   nil,   nil,   306,   307,    92,
   285,    44,   nil,   nil,   nil,   327,   nil,   318,   314,   288,
   -45,   300,   nil,   322,   nil,   641,  1544,   316,   nil,   nil,
   nil,   320,   330,  1353,  1435,   nil,   357,   311,   349,   328,
   323,   -26,   268,   367,   368,   nil,   nil,   nil,   nil,   370,
   nil,   373,   361,   nil,   355,   353,     7,  1314,   424,  1664,
   380,   nil,    93,   411,   nil,   nil,   nil,   388,    -9,   nil,
   nil,   nil,   nil,   nil,   419,   412,   nil,   426,   -19,   nil,
   430,   nil,   -20,   408,   415,   433,  1258,   511,   nil,   431,
   nil,   nil,  1684,   671,   944,   nil,   nil,   -38,   nil,   nil,
   nil,   nil,   426,   424,  1386,  1389,   428,   430,   nil,   nil,
   nil,   455,    64,   482,  1498,   467,   nil,   nil,   491,   nil,
   nil,   -41,   499,   476,   nil,   nil,   nil,   -14,   nil,   nil,
  1409,   nil,   152,   482,   157,   507,   nil,  1296,   nil,     1,
   516,   nil,   nil,   nil,   nil,   nil,   517,   498,   -20,   nil,
   nil,   nil,   nil,  1100,   257,   nil ]

racc_action_default = [
  -137,  -194,    -1,  -194,  -194,  -124,  -126,  -194,  -194,   -37,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,  -193,  -194,    -2,    -3,    -9,
   -10,  -194,  -175,  -182,    -4,  -125,  -194,    -5,   -12,   -76,
   -76,  -194,  -194,   -76,   -95,  -194,   -15,  -194,  -194,  -194,
  -113,  -110,  -194,  -126,    -6,   -12,    -7,   -17,   -18,   -19,
   -20,   -21,  -194,  -194,  -194,  -194,   -63,   -65,  -194,  -194,
    -8,   -23,   -24,   -31,   -26,   -27,   -28,   -37,  -194,  -194,
  -138,  -194,   -76,  -140,  -147,  -194,  -194,  -194,  -194,  -194,
   386,  -194,   -37,  -172,  -194,   -76,   -76,   -76,  -194,  -194,
   -13,  -194,  -194,  -194,  -194,  -194,   -16,  -194,  -194,   -98,
  -194,  -194,  -109,  -194,  -113,  -194,  -126,  -128,  -194,  -194,
  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
  -194,  -194,  -194,  -194,  -194,  -194,   -56,   -57,  -194,  -194,
  -173,   -71,  -194,  -194,   -37,   -73,   -74,   -25,   -31,   -31,
   -34,  -194,   -37,  -194,   -87,   -77,  -194,  -141,  -194,  -148,
   -37,  -194,  -194,   -37,   -37,   -11,  -171,  -176,  -194,  -194,
  -194,  -194,  -194,  -194,   -91,   -69,  -194,   -13,  -194,  -194,
  -194,  -115,  -194,  -116,   -97,   -99,  -100,  -194,  -194,  -114,
  -111,  -127,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -19,
  -194,  -194,   -62,  -126,  -173,  -194,   -72,  -194,   -68,  -194,
   -32,   -33,   -29,  -194,   -35,   -38,   -22,   -83,  -194,   -84,
   -85,   -88,  -142,  -150,  -194,  -169,  -170,  -194,  -194,  -194,
  -194,  -194,   -89,   -90,   -14,  -194,   -92,   -71,  -194,  -119,
  -122,  -194,  -112,  -194,   -58,  -194,  -194,  -194,  -174,   -64,
   -66,  -194,  -183,   -37,   -37,   -75,  -194,  -144,  -142,  -194,
  -157,  -155,   -37,  -185,  -185,  -187,  -188,  -189,   -70,  -194,
  -104,  -194,  -117,  -120,  -194,  -194,  -122,  -126,  -194,  -194,
  -194,  -129,   -81,  -194,   -30,   -36,   -86,  -194,   -37,  -143,
  -146,  -149,  -158,  -151,  -194,  -153,  -156,  -194,  -162,  -166,
  -194,  -186,  -194,  -194,  -194,  -194,  -126,  -194,  -123,  -194,
   -60,   -59,   -61,  -194,  -194,   -79,   -80,   -81,  -184,  -139,
  -145,  -152,  -147,  -194,   -37,   -37,  -178,  -178,   -93,   -94,
  -118,  -194,  -194,  -106,  -194,  -194,   -82,  -154,  -194,  -163,
  -164,  -124,  -194,  -194,   -96,  -121,  -105,  -194,   -67,   -78,
   -37,  -177,  -190,  -194,  -190,  -185,  -192,  -126,  -108,   -10,
  -194,  -160,  -161,  -180,  -181,  -191,  -194,  -194,  -194,  -179,
  -107,  -159,  -167,  -194,  -194,  -168 ]

racc_goto_table = [
    56,   139,   215,   213,   176,   148,    70,   150,   233,   310,
   312,   101,   112,   214,   261,   188,   106,    37,   110,   231,
   223,   285,   309,    25,   284,   219,   283,   267,   182,    34,
   153,   323,   325,   306,   187,   363,   190,   210,   228,   108,
    80,   234,   165,   144,   237,   238,   373,   178,   375,   351,
   353,   220,   221,   107,   136,   137,   138,   285,    50,    50,
   318,   143,    52,   299,   117,    73,   346,   325,   281,   156,
    54,   297,   158,   179,   151,   356,   189,   258,   161,   269,
   148,   148,   150,   150,   349,   350,   167,   214,   328,   166,
   171,   172,   340,   100,   347,   270,   301,   181,   100,   303,
   100,   376,    28,   181,   307,    50,   370,   381,   279,    52,
   192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   191,    27,   149,
   162,   296,   295,    73,   217,    93,     2,   154,   368,   240,
   361,   160,     1,   244,   163,   164,   227,   278,    73,   224,
   nil,   nil,   nil,   nil,   nil,   177,   180,   nil,   nil,   nil,
   239,   nil,   241,   nil,   nil,   nil,   nil,    50,    50,   nil,
   nil,   nil,    52,    83,    84,    85,    86,    87,    88,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    98,    99,   nil,   nil,   103,   nil,
   nil,   nil,   nil,   256,   149,   149,   nil,   nil,    73,   nil,
   371,   nil,   232,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   100,   nil,   nil,   257,   100,   345,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   155,   nil,   nil,
   nil,   181,   nil,   nil,   nil,   nil,   nil,   289,   nil,   nil,
   168,   169,   170,   nil,   nil,   nil,   nil,   nil,   227,   nil,
   294,   224,   nil,   nil,   nil,    50,   nil,   nil,   nil,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   322,   nil,   nil,   nil,   nil,   nil,   268,   366,
   nil,   nil,   nil,   nil,   nil,   330,   nil,   nil,   319,   374,
   280,   148,   nil,   150,   nil,   nil,   nil,   181,   nil,   342,
   nil,   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,    73,
    73,   nil,   nil,   nil,   268,   nil,   nil,   341,    73,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    73,   nil,   331,   372,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,   nil,    52,   nil,   nil,   384,   nil,   nil,   377,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    73,    73,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   369,   nil,   nil,    50,
   nil,   nil,   nil,    52,   nil,   149 ]

racc_goto_check = [
     8,    24,    25,    50,    23,    18,     9,    19,    63,    76,
    76,    13,    45,    55,    27,    23,    13,     6,    13,    35,
    22,    49,    73,    58,    41,    21,    47,    60,    40,     5,
    11,    28,    29,    69,    40,    79,    36,    23,    30,     8,
    58,    21,    11,    26,    21,    21,    79,    37,    79,    77,
    77,    20,    20,    14,     8,     8,     8,    49,    12,    12,
    41,     8,    10,    60,     6,    10,    28,    29,    38,    59,
     7,    61,    62,    13,     9,    43,    45,    50,     8,    64,
    18,    18,    19,    19,    73,    73,     8,    55,    27,     9,
     8,     8,    47,    12,    69,    65,    66,     8,    12,    67,
    12,    76,     4,     8,    70,    12,    71,    72,    25,    10,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     6,     3,    10,
    74,    35,    22,    10,     8,    75,     2,    10,    39,    13,
    78,    10,     1,    13,    10,    10,     8,    23,    10,     9,
   nil,   nil,   nil,   nil,   nil,    12,    12,   nil,   nil,   nil,
     8,   nil,     8,   nil,   nil,   nil,   nil,    12,    12,   nil,
   nil,   nil,    10,    31,    31,    31,    31,    31,    31,    31,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,    31,   nil,   nil,    31,   nil,
   nil,   nil,   nil,     8,    10,    10,   nil,   nil,    10,   nil,
    63,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,     6,    12,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,
    31,    31,    31,   nil,   nil,   nil,   nil,   nil,     8,   nil,
     9,     9,   nil,   nil,   nil,    12,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,    10,    24,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,     6,    24,
    12,    18,   nil,    19,   nil,   nil,   nil,     8,   nil,     8,
   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,    10,
    10,   nil,   nil,   nil,    10,   nil,   nil,     6,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,    12,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,    10,   nil,   nil,     8,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    12,
   nil,   nil,   nil,    10,   nil,    10 ]

racc_goto_pointer = [
   nil,   142,   136,   125,    98,    24,    11,    63,    -8,    -3,
    56,   -49,    52,   -30,     7,   nil,   nil,   nil,   -68,   -66,
   -97,  -119,  -132,   -98,   -64,  -139,   -26,  -205,  -261,  -260,
  -116,   155,   nil,   nil,   nil,  -135,   -79,   -56,  -181,  -219,
   -77,  -226,   nil,  -268,   nil,   -38,   nil,  -223,   nil,  -229,
  -137,   nil,   nil,   nil,   nil,  -127,   nil,   nil,    23,   -14,
  -205,  -196,   -12,  -150,  -154,  -138,  -174,  -172,   nil,  -238,
  -168,  -254,  -271,  -250,    43,   103,  -264,  -287,  -211,  -316 ]

racc_goto_default = [
   nil,   nil,   nil,    17,   262,   364,   nil,    53,   175,   308,
    30,    31,    67,   nil,   nil,    66,    57,   229,    71,    72,
   147,    78,   nil,   216,   nil,   nil,   nil,   311,   nil,    82,
   nil,   nil,   326,   327,   230,   nil,    42,   nil,   nil,    44,
   282,   nil,   nil,   nil,    51,   nil,   114,   nil,   286,    36,
   nil,    10,    11,    12,    13,    14,    15,    16,   nil,   nil,
   nil,   nil,   304,    32,   nil,   nil,   nil,   nil,   305,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_none,
  2, 82, :_reduce_2,
  2, 82, :_reduce_3,
  2, 82, :_reduce_4,
  2, 82, :_reduce_5,
  2, 82, :_reduce_6,
  2, 82, :_reduce_7,
  2, 82, :_reduce_8,
  1, 91, :_reduce_9,
  1, 92, :_reduce_10,
  3, 92, :_reduce_11,
  1, 93, :_reduce_12,
  1, 94, :_reduce_13,
  3, 94, :_reduce_14,
  0, 95, :_reduce_15,
  1, 95, :_reduce_none,
  1, 96, :_reduce_17,
  1, 96, :_reduce_18,
  1, 96, :_reduce_19,
  1, 97, :_reduce_20,
  1, 97, :_reduce_21,
  1, 98, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  2, 90, :_reduce_25,
  1, 99, :_reduce_26,
  1, 99, :_reduce_27,
  1, 99, :_reduce_28,
  3, 99, :_reduce_29,
  5, 100, :_reduce_30,
  0, 101, :_reduce_31,
  2, 101, :_reduce_32,
  2, 101, :_reduce_33,
  1, 101, :_reduce_34,
  1, 103, :_reduce_35,
  3, 103, :_reduce_36,
  0, 102, :_reduce_37,
  3, 102, :_reduce_38,
  3, 89, :_reduce_39,
  3, 89, :_reduce_40,
  3, 89, :_reduce_41,
  3, 89, :_reduce_42,
  3, 89, :_reduce_43,
  3, 89, :_reduce_44,
  3, 89, :_reduce_45,
  3, 89, :_reduce_46,
  3, 89, :_reduce_47,
  3, 89, :_reduce_48,
  3, 89, :_reduce_49,
  3, 89, :_reduce_50,
  3, 89, :_reduce_51,
  3, 89, :_reduce_52,
  3, 89, :_reduce_53,
  3, 89, :_reduce_54,
  3, 89, :_reduce_55,
  2, 89, :_reduce_56,
  2, 89, :_reduce_57,
  4, 89, :_reduce_58,
  6, 89, :_reduce_59,
  6, 89, :_reduce_60,
  6, 89, :_reduce_61,
  3, 89, :_reduce_62,
  1, 89, :_reduce_none,
  4, 89, :_reduce_64,
  1, 89, :_reduce_65,
  4, 89, :_reduce_66,
  8, 89, :_reduce_67,
  3, 89, :_reduce_68,
  1, 104, :_reduce_69,
  3, 104, :_reduce_70,
  0, 106, :_reduce_71,
  1, 106, :_reduce_none,
  1, 107, :_reduce_73,
  1, 107, :_reduce_74,
  4, 110, :_reduce_75,
  0, 112, :_reduce_76,
  2, 112, :_reduce_77,
  3, 113, :_reduce_78,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  0, 109, :_reduce_81,
  2, 109, :_reduce_82,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_85,
  3, 116, :_reduce_86,
  0, 111, :_reduce_87,
  1, 111, :_reduce_none,
  4, 88, :_reduce_89,
  4, 88, :_reduce_90,
  3, 88, :_reduce_91,
  4, 88, :_reduce_92,
  7, 88, :_reduce_93,
  7, 88, :_reduce_94,
  1, 88, :_reduce_none,
  8, 88, :_reduce_96,
  3, 88, :_reduce_97,
  2, 88, :_reduce_98,
  3, 88, :_reduce_99,
  3, 88, :_reduce_100,
  1, 123, :_reduce_101,
  2, 123, :_reduce_102,
  1, 118, :_reduce_103,
  3, 118, :_reduce_104,
  8, 120, :_reduce_105,
  0, 124, :_reduce_106,
  4, 124, :_reduce_107,
  2, 124, :_reduce_108,
  2, 125, :_reduce_109,
  1, 117, :_reduce_110,
  3, 117, :_reduce_111,
  3, 127, :_reduce_112,
  0, 126, :_reduce_113,
  2, 126, :_reduce_114,
  1, 121, :_reduce_none,
  1, 121, :_reduce_116,
  1, 128, :_reduce_117,
  3, 128, :_reduce_118,
  0, 119, :_reduce_119,
  1, 119, :_reduce_none,
  4, 129, :_reduce_121,
  0, 122, :_reduce_122,
  2, 122, :_reduce_123,
  0, 130, :_reduce_124,
  1, 130, :_reduce_125,
  0, 87, :_reduce_126,
  3, 87, :_reduce_127,
  2, 87, :_reduce_128,
  4, 105, :_reduce_129,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 139, :_reduce_137,
  2, 139, :_reduce_138,
  7, 132, :_reduce_139,
  0, 140, :_reduce_140,
  1, 140, :_reduce_141,
  0, 141, :_reduce_142,
  2, 141, :_reduce_143,
  0, 142, :_reduce_144,
  2, 142, :_reduce_145,
  6, 133, :_reduce_146,
  0, 143, :_reduce_147,
  1, 143, :_reduce_148,
  2, 145, :_reduce_149,
  0, 146, :_reduce_150,
  2, 146, :_reduce_151,
  2, 149, :_reduce_152,
  1, 150, :_reduce_153,
  3, 150, :_reduce_154,
  0, 148, :_reduce_155,
  1, 148, :_reduce_none,
  0, 147, :_reduce_157,
  1, 147, :_reduce_158,
  12, 134, :_reduce_159,
  1, 152, :_reduce_160,
  1, 152, :_reduce_161,
  1, 154, :_reduce_162,
  3, 154, :_reduce_163,
  3, 154, :_reduce_164,
  0, 151, :_reduce_165,
  1, 151, :_reduce_166,
  1, 153, :_reduce_167,
  3, 153, :_reduce_168,
  4, 135, :_reduce_169,
  4, 136, :_reduce_170,
  3, 144, :_reduce_171,
  2, 155, :_reduce_172,
  0, 131, :_reduce_173,
  2, 131, :_reduce_174,
  0, 156, :_reduce_175,
  2, 156, :_reduce_176,
  9, 137, :_reduce_177,
  0, 158, :_reduce_178,
  4, 158, :_reduce_179,
  2, 159, :_reduce_180,
  2, 159, :_reduce_181,
  1, 85, :_reduce_182,
  1, 108, :_reduce_183,
  3, 108, :_reduce_184,
  0, 157, :_reduce_185,
  1, 157, :_reduce_none,
  5, 86, :_reduce_187,
  5, 86, :_reduce_188,
  5, 86, :_reduce_189,
  0, 160, :_reduce_190,
  2, 160, :_reduce_191,
  9, 138, :_reduce_192,
  1, 83, :_reduce_193 ]

racc_reduce_n = 194

racc_shift_n = 386

racc_token_table = {
  false => 0,
  :error => 1,
  "forall" => 2,
  "exists" => 3,
  "old" => 4,
  "[" => 5,
  "]" => 6,
  "!" => 7,
  "*" => 8,
  "/" => 9,
  "%" => 10,
  "+" => 11,
  "-" => 12,
  "++" => 13,
  "==" => 14,
  "!=" => 15,
  "<" => 16,
  ">" => 17,
  "<=" => 18,
  ">=" => 19,
  "<:" => 20,
  "&&" => 21,
  "||" => 22,
  "==>" => 23,
  "<==>" => 24,
  "if" => 25,
  "then" => 26,
  "else" => 27,
  ":" => 28,
  "(" => 29,
  ")" => 30,
  :IDENTIFIER => 31,
  :NUMBER => 32,
  :BITVECTOR => 33,
  :STRING => 34,
  :BVTYPE => 35,
  :PARSE_DECL => 36,
  :PARSE_PARAM => 37,
  :PARSE_SPEC => 38,
  :PARSE_BLOCKS => 39,
  :PARSE_STMT => 40,
  :PARSE_EXPR => 41,
  :PARSE_TYPE => 42,
  "," => 43,
  "true" => 44,
  "false" => 45,
  "bool" => 46,
  "int" => 47,
  ":=" => 48,
  "|" => 49,
  "::" => 50,
  "{:" => 51,
  "}" => 52,
  "{" => 53,
  "assert" => 54,
  ";" => 55,
  "assume" => 56,
  "havoc" => 57,
  "call" => 58,
  "while" => 59,
  "break" => 60,
  "return" => 61,
  "goto" => 62,
  "invariant" => 63,
  "free" => 64,
  "type" => 65,
  "finite" => 66,
  "=" => 67,
  "const" => 68,
  "unique" => 69,
  "complete" => 70,
  "function" => 71,
  "returns" => 72,
  "axiom" => 73,
  "var" => 74,
  "where" => 75,
  "procedure" => 76,
  "requires" => 77,
  "modifies" => 78,
  "ensures" => 79,
  "implementation" => 80 }

racc_nt_base = 81

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"forall\"",
  "\"exists\"",
  "\"old\"",
  "\"[\"",
  "\"]\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"++\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<:\"",
  "\"&&\"",
  "\"||\"",
  "\"==>\"",
  "\"<==>\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "IDENTIFIER",
  "NUMBER",
  "BITVECTOR",
  "STRING",
  "BVTYPE",
  "PARSE_DECL",
  "PARSE_PARAM",
  "PARSE_SPEC",
  "PARSE_BLOCKS",
  "PARSE_STMT",
  "PARSE_EXPR",
  "PARSE_TYPE",
  "\",\"",
  "\"true\"",
  "\"false\"",
  "\"bool\"",
  "\"int\"",
  "\":=\"",
  "\"|\"",
  "\"::\"",
  "\"{:\"",
  "\"}\"",
  "\"{\"",
  "\"assert\"",
  "\";\"",
  "\"assume\"",
  "\"havoc\"",
  "\"call\"",
  "\"while\"",
  "\"break\"",
  "\"return\"",
  "\"goto\"",
  "\"invariant\"",
  "\"free\"",
  "\"type\"",
  "\"finite\"",
  "\"=\"",
  "\"const\"",
  "\"unique\"",
  "\"complete\"",
  "\"function\"",
  "\"returns\"",
  "\"axiom\"",
  "\"var\"",
  "\"where\"",
  "\"procedure\"",
  "\"requires\"",
  "\"modifies\"",
  "\"ensures\"",
  "\"implementation\"",
  "$start",
  "target",
  "program",
  "decl",
  "param_decl",
  "spec",
  "blocks",
  "stmt",
  "expr",
  "type",
  "name",
  "names",
  "ident",
  "idents",
  "idents_opt",
  "literal",
  "bool_lit",
  "string",
  "type_atom",
  "map_type",
  "tc_args",
  "type_args",
  "types",
  "exprs",
  "body",
  "exprs_opt",
  "quantifier",
  "param_decls",
  "ants",
  "attr",
  "enss_opt",
  "attrs",
  "trigger",
  "ant",
  "ens",
  "enss",
  "lhss",
  "call_lhs",
  "wc_exprs_opt",
  "if_stmt",
  "wc_expr",
  "loop_invs",
  "stmts",
  "else_stmt",
  "lhs",
  "selects",
  "select",
  "wc_exprs",
  "loop_inv",
  "free_opt",
  "var_decls",
  "type_decl",
  "const_decl",
  "func_decl",
  "axiom_decl",
  "var_decl",
  "proc_decl",
  "impl_decl",
  "decls",
  "finite_opt",
  "tc_params",
  "type_syn",
  "unique_opt",
  "typed_ids",
  "order_spec",
  "parent_info",
  "complete_opt",
  "parent_edges_opt",
  "parent_edge",
  "parent_edges",
  "fargs_opt",
  "farg",
  "fbody",
  "fargs",
  "typed_ids_where",
  "where_clause",
  "param_decls_opt",
  "out_params",
  "pspec",
  "specs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_2(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_3(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_4(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_8(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_10(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_11(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_12(val, _values)
     {name: val[0]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_13(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_14(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_15(val, _values)
     [] 
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_17(val, _values)
     BooleanLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_18(val, _values)
     BitvectorLiteral.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_19(val, _values)
     IntegerLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_20(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values)
     false 
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_25(val, _values)
     CustomType.new name: val[0], arguments: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_26(val, _values)
     Type::Boolean 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_27(val, _values)
     Type::Integer 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_28(val, _values)
     BitvectorType.new width: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_29(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_30(val, _values)
        MapType.new arguments: val[0], domain: val[2], range: val[4]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_31(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_32(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_33(val, _values)
     [(CustomType.new name: val[0], arguments: val[1])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_34(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_35(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_36(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_37(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_38(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_39(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_40(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_41(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_42(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_43(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_44(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_45(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_46(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_47(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_48(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_49(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_50(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_51(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_52(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_53(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_54(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_55(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_56(val, _values)
     LogicalNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_57(val, _values)
     ArithmeticNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_58(val, _values)
     MapSelect.new map: val[0], indexes: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_59(val, _values)
     MapUpdate.new map: val[0], indexes: val[2], value: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_60(val, _values)
     BitvectorExtract.new bitvector: val[0], msb: val[2], lsb: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_61(val, _values)
            IfExpression.new condition: val[1], then: val[3], else: val[5]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_62(val, _values)
     CodeExpression.new body: val[1] 
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_64(val, _values)
            id = FunctionIdentifier.new val[0]
        FunctionApplication.new function: id, arguments: val[2]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_65(val, _values)
     StorageIdentifier.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_66(val, _values)
     OldExpression.new expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_67(val, _values)
            QuantifiedExpression.new quantifier: val[1], type_arguments: val[2],
          variables: val[3],
          attributes: val[5].select{|a| a.is_a?(Hash)},
          triggers: val[5].select{|es| es.is_a?(Array)}.map{|es| Trigger.new(expressions: es)},
          expression: val[6]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_68(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_69(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_70(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_71(val, _values)
     [] 
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_73(val, _values)
    'forall'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_74(val, _values)
    'exists'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_75(val, _values)
     {val[1].to_sym => val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_76(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_77(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_78(val, _values)
     val[1] 
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_81(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_82(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_85(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_86(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_87(val, _values)
     [] 
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_89(val, _values)
     AssertStatement.new attributes: val[1], expression: val[2], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_90(val, _values)
     AssumeStatement.new attributes: val[1], expression: val[2], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_91(val, _values)
          ids = val[1].map{|id| StorageIdentifier.new id}
      HavocStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_92(val, _values)
     AssignStatement.new lhs: val[0], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_93(val, _values)
          CallStatement.new attributes: val[1], assignments: val[2][:rets],
      procedure: val[2][:name], arguments: val[4], token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_94(val, _values)
          id = ProcedureIdentifier.new val[2]
      CallStatement.new assignments: nil, procedure: id, arguments: val[4],
      token: val[0]
    
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_96(val, _values)
          WhileStatement.new condition: val[2], invariants: val[4], blocks: val[6],
      token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_97(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      BreakStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_98(val, _values)
     ReturnStatement.new token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_99(val, _values)
     ReturnStatement.new expression: val[1], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_100(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      GotoStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_101(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_102(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_103(val, _values)
     {name: ProcedureIdentifier.new(val[0]), rets: []} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_104(val, _values)
          ids = val[0].map{|id| StorageIdentifier.new id}
      id = ProcedureIdentifier.new val[2]
      {name: id, rets: ids}
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_105(val, _values)
     IfStatement.new condition: val[2], blocks: val[5], else: val[7], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_106(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_107(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_108(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_109(val, _values)
        id = StorageIdentifier.new val[0]
    val[1].reduce(id){|m,x| MapSelect.new map: m, indexes: x}
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_110(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_111(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_112(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_113(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_114(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_116(val, _values)
     Expression::Wildcard 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_117(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_118(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_119(val, _values)
     [] 
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_121(val, _values)
     LoopInvariant.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_122(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_123(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_124(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_125(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_126(val, _values)
     [Block.new(names: [], statements: [])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_127(val, _values)
          bs = val[2]
      bs.first.prepend_children(:names,val[0])
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_128(val, _values)
          bs = val[1]
      bs.unshift(Block.new(names: [], statements: [])) unless bs.first.names.empty?
      bs.first.prepend_children(:statements,val[0])
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_129(val, _values)
     Body.new locals: val[1], blocks: val[2] 
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_137(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_138(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_139(val, _values)
        if val[5] && val[2]
      abort "Illegal declaration of type #{([val[3]] + val[4]) * " "}"
    end
    TypeDeclaration.new attributes: val[1], finite: val[2], name: val[3],
      arguments: val[4], type: val[5]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_140(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_141(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_142(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_143(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_144(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_145(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_146(val, _values)
        ConstantDeclaration.new(val[3].merge({attributes: val[1], unique: val[2], order_spec: val[4]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_147(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_148(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_149(val, _values)
     [val[0],val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_150(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_151(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_152(val, _values)
        id = StorageIdentifier.new val[1]
    [val[0],id]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_153(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_154(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_155(val, _values)
     [] 
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_157(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_158(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_159(val, _values)
        FunctionDeclaration.new attributes: val[1], name: val[2],
      type_arguments: val[3], arguments: val[5], return: val[9], body: val[11]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_160(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_161(val, _values)
     StorageDeclaration.new(names: [], type: val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_162(val, _values)
     [{names: [], type: val[0]}] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_163(val, _values)
          if val[2].first[:names].empty?
        [{names: [], type: val[0]}] + val[2]
      else
        val[2].first[:names].unshift(val[0])
        val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_164(val, _values)
          # assert val[2].first[:names].empty?

      unless val[0].respond_to?(:name)
        raise ParseError, "parse error on value #{val[0]}: expecting name."
      end

      if val[2].first[:names].empty?
        val[2].first[:names].unshift(val[0])
        val[2]
      else
        [{names: [val[0]], type: val[2].first[:names].shift}] + val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_165(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_166(val, _values)
          val[0].map do |x|
        x[:names].map!{|t| t.name}
        StorageDeclaration.new(x)
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_167(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_168(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_169(val, _values)
        AxiomDeclaration.new attributes: val[1], expression: val[2]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_170(val, _values)
        VariableDeclaration.new(val[2].merge({attributes: val[1]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_171(val, _values)
     {names: val[0], type: val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_172(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_173(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_174(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_175(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_176(val, _values)
     {where: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_177(val, _values)
          ProcedureDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: val[8][:specs], body: val[8][:body]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_178(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_179(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_180(val, _values)
     {specs: val[1], body: nil} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_181(val, _values)
     {specs: val[0], body: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_182(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_183(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_184(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_185(val, _values)
     [] 
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_187(val, _values)
          RequiresClause.new free: val[0], attributes: val[2], expression: val[3]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_188(val, _values)
          ids = val[3].map{|id| StorageIdentifier.new id}
      ModifiesClause.new free: val[0], attributes: val[2], identifiers: ids
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_189(val, _values)
          EnsuresClause.new free: val[0], attributes: val[2], expression: val[3]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_190(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_191(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_192(val, _values)
          ImplementationDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: [], body: val[8]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_193(val, _values)
     Program.new declarations: val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class BoogieLanguage


